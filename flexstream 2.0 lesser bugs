<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StreamFlix - Watch Movies, Anime & Shows</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#8B5CF6',
                        secondary: '#1F2937',
                        dark: '#0F172A',
                        accent: '#EC4899'
                    }
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #0F172A;
            color: #F1F5F9;
            overflow-x: hidden;
        }
        
        .poster-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 1.5rem;
        }
        
        @media (max-width: 768px) {
            .poster-grid {
                grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
                gap: 1rem;
            }
        }
        
        .poster-card {
            transition: all 0.3s ease;
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            cursor: pointer;
        }
        
        .poster-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(139, 92, 246, 0.2);
        }
        
        .poster-image {
            width: 100%;
            height: 270px;
            object-fit: cover;
            background: linear-gradient(45deg, #1e293b, #334155);
        }
        
        @media (max-width: 768px) {
            .poster-image {
                height: 200px;
            }
        }
        
        .player-container {
            position: relative;
            padding-top: 56.25%; /* 16:9 Aspect Ratio */
            border-radius: 0.75rem;
            overflow: hidden;
            background-color: #1e293b;
        }
        
        .player-iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
        }
        
        .search-bar {
            background-color: #1e293b;
            border: 1px solid #334155;
            border-radius: 0.75rem;
            padding: 0.75rem 1rem;
            width: 100%;
            color: #f1f5f9;
            transition: all 0.3s ease;
        }
        
        .search-bar:focus {
            outline: none;
            border-color: #8B5CF6;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.2);
        }
        
        .category-btn {
            transition: all 0.2s ease;
        }
        
        .category-btn.active {
            background-color: #8B5CF6;
            color: white;
        }
        
        .episode-item {
            transition: all 0.2s ease;
        }
        
        .episode-item:hover {
            background-color: #334155;
        }
        
        .episode-item.active {
            background-color: #8B5CF6;
            color: white;
        }
        
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-left-color: #8B5CF6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .no-results {
            text-align: center;
            padding: 3rem;
            grid-column: 1 / -1;
        }
        
        .server-btn {
            transition: all 0.2s ease;
        }
        
        .server-btn:hover {
            background-color: #334155;
        }
        
        .server-btn.active {
            background-color: #8B5CF6;
            color: white;
        }
        
        .dub-sub-btn {
            transition: all 0.2s ease;
        }
        
        .dub-sub-btn:hover {
            background-color: #334155;
        }
        
        .dub-sub-btn.active {
            background-color: #8B5CF6;
            color: white;
        }
        
        .error-message {
            color: #f87171;
            text-align: center;
            padding: 1rem;
            border-radius: 0.5rem;
            background-color: rgba(248, 113, 113, 0.1);
            margin-top: 1rem;
        }
        
        .fallback-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            padding: 2rem;
            background-color: rgba(30, 41, 59, 0.9);
            border-radius: 0.75rem;
            max-width: 80%;
        }
        
        .fallback-message h3 {
            margin-bottom: 1rem;
        }
        
        .fallback-message p {
            margin-bottom: 1.5rem;
            color: #94a3b8;
        }
        
        .season-selector {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }
        
        .season-btn {
            padding: 0.5rem 1rem;
            background-color: #334155;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .season-btn:hover {
            background-color: #475569;
        }
        
        .season-btn.active {
            background-color: #8B5CF6;
        }
        
        .episode-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1rem;
        }
        
        .episode-card {
            background-color: #1e293b;
            border-radius: 0.5rem;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .episode-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .episode-card.active {
            border: 2px solid #8B5CF6;
        }
        
        .episode-thumbnail {
            width: 100%;
            height: 85px;
            background: linear-gradient(45deg, #334155, #475569);
        }
        
        .episode-info {
            padding: 0.75rem;
        }
        
        .episode-info .title {
            font-weight: 500;
            margin-bottom: 0.25rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .episode-info .meta {
            font-size: 0.8rem;
            color: #94a3b8;
        }
        
        .server-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        .server-indicator.working {
            background-color: #10B981;
        }
        
        .server-indicator.not-working {
            background-color: #EF4444;
        }
        
        .server-indicator.testing {
            background-color: #F59E0B;
        }
        
        .server-status {
            font-size: 0.75rem;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Header -->
    <header class="bg-dark border-b border-gray-800 sticky top-0 z-50">
        <div class="container mx-auto px-4 py-4 flex flex-col md:flex-row justify-between items-center">
            <div class="flex items-center mb-4 md:mb-0">
                <h1 class="text-2xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
                    <i class="fas fa-play-circle mr-2"></i>StreamFlix
                </h1>
            </div>
            
            <div class="w-full md:w-1/3">
                <div class="relative">
                    <input 
                        type="text" 
                        id="search-input" 
                        placeholder="Search movies, anime, shows..." 
                        class="search-bar pl-10"
                    >
                    <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-8">
        <!-- Category Filters -->
        <div class="flex flex-wrap gap-2 mb-8 justify-center">
            <button class="category-btn px-4 py-2 rounded-full bg-secondary text-white active" data-category="all">All</button>
            <button class="category-btn px-4 py-2 rounded-full bg-secondary text-gray-300" data-category="movie">Movies</button>
            <button class="category-btn px-4 py-2 rounded-full bg-secondary text-gray-300" data-category="tv">TV Shows</button>
            <button class="category-btn px-4 py-2 rounded-full bg-secondary text-gray-300" data-category="anime">Anime</button>
        </div>

        <!-- Content Grid -->
        <div class="poster-grid" id="content-grid">
            <!-- Content will be populated here -->
            <div class="flex justify-center items-center h-64 col-span-full">
                <div class="loading-spinner"></div>
            </div>
        </div>
    </main>

    <!-- Player Modal -->
    <div id="player-modal" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden flex items-center justify-center p-4">
        <div class="w-full max-w-6xl">
            <div class="flex justify-between items-center mb-4">
                <h3 id="player-title" class="text-xl font-bold"></h3>
                <button id="close-player" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div class="lg:col-span-2">
                    <div class="player-container relative">
                        <iframe id="player-iframe" class="player-iframe" allowfullscreen></iframe>
                        <div id="fallback-message" class="fallback-message hidden">
                            <h3 class="text-xl font-bold">Stream Not Available</h3>
                            <p>Please try a different server or check back later.</p>
                            <button id="try-again-btn" class="px-4 py-2 bg-primary rounded-full hover:bg-purple-700 transition mt-4">
                                Try Another Server
                            </button>
                        </div>
                    </div>
                    
                    <div id="episode-selector" class="mt-4 hidden">
                        <div class="season-selector" id="season-selector">
                            <!-- Seasons will be populated here -->
                        </div>
                        <div id="episodes-list" class="episode-grid">
                            <!-- Episodes will be populated here -->
                        </div>
                    </div>
                </div>
                
                <div class="lg:col-span-1">
                    <div class="bg-secondary rounded-xl p-6">
                        <div class="flex gap-4 mb-4">
                            <div class="bg-gray-200 border-2 border-dashed rounded-xl w-24 h-36 flex-shrink-0"></div>
                            <div>
                                <h2 id="info-title" class="text-xl font-bold mb-1"></h2>
                                <div class="text-gray-400 text-sm mb-2">
                                    <span id="info-year"></span>
                                    <span class="mx-2">•</span>
                                    <span id="info-duration"></span>
                                </div>
                                <div class="flex items-center gap-2 mb-3">
                                    <span class="bg-purple-900/50 px-2 py-1 rounded text-sm">
                                        <i class="fas fa-star text-yellow-400 mr-1"></i>
                                        <span id="info-rating"></span>
                                    </span>
                                    <span id="info-genres" class="text-sm text-gray-400"></span>
                                </div>
                                <p id="info-description" class="text-gray-300 text-sm line-clamp-3"></p>
                            </div>
                        </div>
                        
                        <div id="dub-sub-selector" class="mt-4 hidden">
                            <h4 class="font-semibold mb-2">Audio</h4>
                            <div class="flex gap-2">
                                <button class="dub-sub-btn px-4 py-2 rounded-full bg-dark text-gray-300 active" data-type="sub">Subbed</button>
                                <button class="dub-sub-btn px-4 py-2 rounded-full bg-dark text-gray-300" data-type="dub">Dubbed</button>
                            </div>
                        </div>
                        
                        <div id="server-selector" class="mt-6">
                            <h4 class="font-semibold mb-2">Streaming Servers</h4>
                            <div id="server-list" class="flex flex-wrap gap-2">
                                <!-- Server options will be populated here -->
                            </div>
                        </div>
                        
                        <button id="play-btn" class="w-full mt-6 py-3 bg-primary rounded-lg font-medium hover:bg-purple-700 transition">
                            <i class="fas fa-play mr-2"></i> Play
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loading" class="fixed inset-0 bg-black bg-opacity-70 z-50 hidden flex items-center justify-center">
        <div class="loading-spinner"></div>
    </div>

    <script>
        // API Key
        const API_KEY = 'place your api key here';
        
        // DOM Elements
        const contentGrid = document.getElementById('content-grid');
        const searchInput = document.getElementById('search-input');
        const playerModal = document.getElementById('player-modal');
        const playerIframe = document.getElementById('player-iframe');
        const playerTitle = document.getElementById('player-title');
        const closePlayer = document.getElementById('close-player');
        const episodeSelector = document.getElementById('episode-selector');
        const seasonSelector = document.getElementById('season-selector');
        const episodesList = document.getElementById('episodes-list');
        const dubSubSelector = document.getElementById('dub-sub-selector');
        const dubSubButtons = document.querySelectorAll('.dub-sub-btn');
        const serverSelector = document.getElementById('server-selector');
        const serverList = document.getElementById('server-list');
        const loadingIndicator = document.getElementById('loading');
        const categoryButtons = document.querySelectorAll('.category-btn');
        const fallbackMessage = document.getElementById('fallback-message');
        const tryAgainBtn = document.getElementById('try-again-btn');
        const infoTitle = document.getElementById('info-title');
        const infoYear = document.getElementById('info-year');
        const infoDuration = document.getElementById('info-duration');
        const infoRating = document.getElementById('info-rating');
        const infoGenres = document.getElementById('info-genres');
        const infoDescription = document.getElementById('info-description');
        const playBtn = document.getElementById('play-btn');
        
        // Store fetched data
        let allData = [];
        let currentData = [];
        let currentCategory = 'all';
        let currentItemId = null;
        let currentItemTitle = '';
        let currentItemImdbId = null;
        let currentItemMediaType = '';
        let currentDubSub = 'sub'; // Default to subbed
        let currentServers = [];
        let currentServerIndex = 0;
        let currentSeasons = [];
        let currentEpisodes = [];
        let currentSelectedSeason = 1;
        let currentSelectedEpisode = null;
        let currentTmdbId = null;
        
        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            // Fetch trending content
            fetchTrendingContent();
            
            // Add event listeners
            searchInput.addEventListener('input', handleSearch);
            closePlayer.addEventListener('click', closePlayerModal);
            tryAgainBtn.addEventListener('click', tryNextServer);
            playBtn.addEventListener('click', playContent);
            
            // Add category button listeners
            categoryButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Update active button
                    categoryButtons.forEach(btn => {
                        btn.classList.remove('active');
                        btn.classList.add('text-gray-300');
                        btn.classList.remove('text-white');
                    });
                    button.classList.add('active');
                    button.classList.remove('text-gray-300');
                    button.classList.add('text-white');
                    
                    // Filter content based on category
                    currentCategory = button.dataset.category;
                    filterContent(currentCategory);
                });
            });
            
            // Add dub/sub button listeners
            dubSubButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Update active button
                    dubSubButtons.forEach(btn => {
                        btn.classList.remove('active');
                        btn.classList.add('text-gray-300');
                        btn.classList.remove('text-white');
                    });
                    button.classList.add('active');
                    button.classList.remove('text-gray-300');
                    button.classList.add('text-white');
                    
                    // Update dub/sub setting
                    currentDubSub = button.dataset.type;
                    
                    // Re-render episodes if needed
                    if (currentItemMediaType === 'anime' || currentItemMediaType === 'tv') {
                        renderEpisodes();
                    }
                });
            });
        });
        
        // Fetch trending content from TMDB API
        async function fetchTrendingContent() {
            try {
                // Show loading indicator
                if (contentGrid.children.length === 0 || contentGrid.children[0].classList.contains('loading-spinner')) {
                    contentGrid.innerHTML = '<div class="flex justify-center items-center h-64 col-span-full"><div class="loading-spinner"></div></div>';
                }
                
                // Fetch trending all
                const response = await fetch(`https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}`);
                const data = await response.json();
                allData = data.results.slice(0, 30); // Get first 30 items
                currentData = [...allData];
                renderContent();
            } catch (error) {
                console.error('Error fetching data:', error);
                contentGrid.innerHTML = '<div class="no-results text-gray-400">Failed to load content. Please check your connection.</div>';
            }
        }
        
        // Render content
        function renderContent() {
            contentGrid.innerHTML = '';
            
            if (currentData.length === 0) {
                contentGrid.innerHTML = '<div class="no-results text-gray-400">No content available</div>';
                return;
            }
            
            currentData.forEach((item, index) => {
                const posterCard = createPosterCard(item);
                posterCard.style.animationDelay = `${index * 0.1}s`;
                posterCard.classList.add('fade-in');
                contentGrid.appendChild(posterCard);
            });
        }
        
        // Create a poster card element
        function createPosterCard(item) {
            const card = document.createElement('div');
            card.className = 'poster-card';
            card.dataset.id = item.id;
            card.dataset.type = item.media_type || (item.title ? 'movie' : 'tv');
            
            // Get poster image
            let posterPath = '';
            if (item.poster_path) {
                posterPath = `https://image.tmdb.org/t/p/w500${item.poster_path}`;
            } else if (item.backdrop_path) {
                posterPath = `https://image.tmdb.org/t/p/w500${item.backdrop_path}`;
            } else {
                posterPath = 'https://placehold.co/300x450/1e293b/94a3b8?text=No+Image';
            }
            
            // Get title and year
            let title = '';
            let year = '';
            
            if (item.media_type === 'movie' || item.title) {
                title = item.title;
                year = item.release_date ? new Date(item.release_date).getFullYear() : 'N/A';
            } else {
                title = item.name || item.title;
                year = item.first_air_date ? new Date(item.first_air_date).getFullYear() : 'N/A';
            }
            
            card.innerHTML = `
                <div class="relative">
                    <img src="${posterPath}" alt="${title}" class="poster-image" loading="lazy">
                    <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-3">
                        <h3 class="font-bold truncate">${title}</h3>
                        <p class="text-sm text-gray-300">${year}</p>
                    </div>
                </div>
            `;
            
            card.addEventListener('click', () => openPlayer(item));
            return card;
        }
        
        // Open player modal
        async function openPlayer(item) {
            let title = '';
            let type = '';
            let imdbId = item.imdb_id || null;
            let tmdbId = item.id || null;
            let year = '';
            let duration = '';
            let rating = '';
            let genres = '';
            let description = '';
            
            if (item.media_type === 'movie' || item.title) {
                title = item.title;
                type = 'movie';
                year = item.release_date ? new Date(item.release_date).getFullYear() : 'N/A';
                duration = item.runtime ? `${item.runtime} min` : 'N/A';
                rating = item.vote_average ? item.vote_average.toFixed(1) : 'N/A';
                description = item.overview || 'No description available.';
            } else {
                title = item.name || item.title;
                type = 'tv';
                year = item.first_air_date ? new Date(item.first_air_date).getFullYear() : 'N/A';
                duration = item.episode_run_time && item.episode_run_time.length > 0 ? `${item.episode_run_time[0]} min/ep` : 'N/A';
                rating = item.vote_average ? item.vote_average.toFixed(1) : 'N/A';
                description = item.overview || 'No description available.';
            }
            
            // Store current item data
            currentItemId = item.id;
            currentItemTitle = title;
            currentItemImdbId = imdbId;
            currentTmdbId = tmdbId;
            currentItemMediaType = type;
            
            // Update info section
            playerTitle.textContent = title;
            infoTitle.textContent = title;
            infoYear.textContent = year;
            infoDuration.textContent = duration;
            infoRating.textContent = rating;
            infoDescription.textContent = description;
            
            // Get genres
            try {
                const genreResponse = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`);
                const genreData = await genreResponse.json();
                const genreMap = {};
                genreData.genres.forEach(genre => {
                    genreMap[genre.id] = genre.name;
                });
                
                if (item.genre_ids) {
                    genres = item.genre_ids.map(id => genreMap[id]).filter(Boolean).join(', ');
                }
                infoGenres.textContent = genres;
            } catch (error) {
                infoGenres.textContent = 'N/A';
            }
            
            playerModal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
            
            // Show loading indicator
            loadingIndicator.classList.remove('hidden');
            fallbackMessage.classList.add('hidden');
            
            // For TV shows and anime, show episode selector and dub/sub options
            if (type === 'tv' || type === 'anime') {
                episodeSelector.classList.remove('hidden');
                dubSubSelector.classList.remove('hidden');
                fetchSeasons(item.id);
            } else {
                episodeSelector.classList.add('hidden');
                dubSubSelector.classList.add('hidden');
                setupServerOptions(item, type, imdbId, tmdbId);
            }
            
            // Hide loading indicator after a delay
            setTimeout(() => {
                loadingIndicator.classList.add('hidden');
            }, 2000);
        }
        
        // Close player modal
        function closePlayerModal() {
            playerModal.classList.add('hidden');
            document.body.style.overflow = 'auto';
            playerIframe.src = '';
        }
        
        // Try next server
        function tryNextServer() {
            currentServerIndex++;
            if (currentServerIndex < currentServers.length) {
                const nextServer = currentServers[currentServerIndex];
                playerIframe.src = nextServer.url;
                updateActiveServerButton(nextServer.name);
                fallbackMessage.classList.add('hidden');
                loadingIndicator.classList.remove('hidden');
                
                setTimeout(() => {
                    loadingIndicator.classList.add('hidden');
                }, 2000);
            } else {
                fallbackMessage.classList.remove('hidden');
            }
        }
        
        // Update active server button
        function updateActiveServerButton(serverName) {
            document.querySelectorAll('.server-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.includes(serverName)) {
                    btn.classList.add('active');
                }
            });
        }
        
        // Play content
        function playContent() {
            if (currentServers.length > 0) {
                const firstServer = currentServers[0];
                playerIframe.src = firstServer.url;
                updateActiveServerButton(firstServer.name);
                fallbackMessage.classList.add('hidden');
                loadingIndicator.classList.remove('hidden');
                
                setTimeout(() => {
                    loadingIndicator.classList.add('hidden');
                }, 2000);
            }
        }
        
        // Set up server options with VidSrc and fallbacks
        function setupServerOptions(item, type, imdbId, tmdbId) {
            serverList.innerHTML = '';
            currentServers = [];
            currentServerIndex = 0;
            
            // Create server options based on type
            let servers = [];
            
            if (type === 'movie') {
                // Fixed VidSrc URL for movies - using TMDB ID instead of IMDB ID
                servers = [
                    { name: 'VidSrc', url: `https://vidsrc.to/embed/movie/${tmdbId}`, type: 'movie' },
                    { name: '2Embed', url: `https://www.2embed.cc/embed/${imdbId}`, type: 'movie' },
                    { name: 'SuperStream', url: `https://superstream.to/embed/movie?imdb=${imdbId}`, type: 'movie' }
                ];
            } else if (type === 'tv') {
                // For TV shows
                servers = [
                    { name: 'VidSrc', url: `https://vidsrc.to/embed/tv/${tmdbId}/${currentSelectedSeason}/${currentSelectedEpisode?.number || 1}`, type: 'tv' },
                    { name: '2Embed', url: `https://www.2embed.cc/embedtv/${imdbId}&s=${currentSelectedSeason}&e=${currentSelectedEpisode?.number || 1}`, type: 'tv' },
                    { name: 'SuperStream', url: `https://superstream.to/embed/tv?imdb=${imdbId}&s=${currentSelectedSeason}&e=${currentSelectedEpisode?.number || 1}`, type: 'tv' }
                ];
            } else if (type === 'anime') {
                // For anime
                const formattedTitle = formatTitleForAnime(currentItemTitle);
                servers = [
                    { name: 'VidSrc', url: `https://vidsrc.to/embed/anime/${formattedTitle}/${currentSelectedEpisode?.number || 1}`, type: 'anime' },
                    { name: '2Embed', url: `https://www.2embed.cc/anime/${formattedTitle}-episode-${currentSelectedEpisode?.number || 1}`, type: 'anime' },
                    { name: 'AnimeFlix', url: `https://animeflix.to/embed/${formattedTitle}-episode-${currentSelectedEpisode?.number || 1}`, type: 'anime' }
                ];
            }
            
            currentServers = servers;
            
            servers.forEach((server, index) => {
                const serverBtn = document.createElement('button');
                serverBtn.className = 'server-btn px-4 py-2 rounded-full bg-dark text-gray-300 flex flex-col items-start';
                serverBtn.innerHTML = `
                    <div class="flex items-center w-full">
                        <span class="server-indicator testing"></span>
                        ${server.name}
                    </div>
                    <span class="server-status text-gray-500">Testing...</span>
                `;
                serverBtn.dataset.name = server.name;
                
                serverBtn.addEventListener('click', () => {
                    // Highlight selected server
                    document.querySelectorAll('.server-btn').forEach(el => {
                        el.classList.remove('active');
                    });
                    serverBtn.classList.add('active');
                    
                    // Show loading indicator
                    loadingIndicator.classList.remove('hidden');
                    fallbackMessage.classList.add('hidden');
                    
                    // Load the server
                    playerIframe.src = server.url;
                    currentServerIndex = index;
                    
                    // Hide loading indicator after a delay
                    setTimeout(() => {
                        loadingIndicator.classList.add('hidden');
                    }, 2000);
                });
                serverList.appendChild(serverBtn);
                
                // Set first server as active
                if (index === 0) {
                    serverBtn.classList.add('active');
                    playerIframe.src = server.url;
                }
                
                // Test server availability
                testServerAvailability(server.url, serverBtn);
            });
        }
        
        // Test server availability
        function testServerAvailability(server, button) {
            const indicator = button.querySelector('.server-indicator');
            const statusText = button.querySelector('.server-status');
            
            // Simulate testing with a timeout
            setTimeout(() => {
                // Simulate 70% success rate for VidSrc, 80% for others
                const isSuccess = Math.random() > (server.name === 'VidSrc' ? 0.3 : 0.2);
                
                if (isSuccess) {
                    indicator.classList.remove('testing');
                    indicator.classList.add('working');
                    statusText.textContent = 'Working';
                    statusText.classList.remove('text-gray-500');
                    statusText.classList.add('text-green-500');
                } else {
                    indicator.classList.remove('testing');
                    indicator.classList.add('not-working');
                    statusText.textContent = 'Not working';
                    statusText.classList.remove('text-gray-500');
                    statusText.classList.add('text-red-500');
                }
            }, 1500);
        }
        
        // Format title for anime URLs
        function formatTitleForAnime(title) {
            return title
                .toLowerCase()
                .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
                .replace(/\s+/g, '-') // Replace spaces with hyphens
                .replace(/-+/g, '-') // Replace multiple hyphens with single
                .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
        }
        
        // Fetch seasons for a show/anime
        async function fetchSeasons(itemId) {
            try {
                // For demo purposes, we'll create sample seasons
                const seasons = [
                    { id: 1, name: 'Season 1', number: 1 },
                    { id: 2, name: 'Season 2', number: 2 },
                    { id: 3, name: 'Season 3', number: 3 }
                ];
                
                currentSeasons = seasons;
                renderSeasons();
            } catch (error) {
                console.error('Error fetching seasons:', error);
                seasonSelector.innerHTML = '<p class="text-gray-400">Failed to load seasons.</p>';
            }
        }
        
        // Render seasons
        function renderSeasons() {
            seasonSelector.innerHTML = '';
            
            if (currentSeasons.length === 0) {
                seasonSelector.innerHTML = '<p class="text-gray-400">No seasons available</p>';
                return;
            }
            
            currentSeasons.forEach(season => {
                const seasonBtn = document.createElement('div');
                seasonBtn.className = 'season-btn';
                seasonBtn.dataset.number = season.number;
                seasonBtn.textContent = season.name;
                
                seasonBtn.addEventListener('click', () => {
                    // Highlight selected season
                    document.querySelectorAll('.season-btn').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    seasonBtn.classList.add('active');
                    
                    // Store selected season
                    currentSelectedSeason = season.number;
                    
                    // Fetch episodes for selected season
                    fetchEpisodes(season.number);
                });
                
                seasonSelector.appendChild(seasonBtn);
            });
            
            // Highlight the first season by default
            if (currentSeasons.length > 0) {
                seasonSelector.firstElementChild.classList.add('active');
                currentSelectedSeason = currentSeasons[0].number;
                
                // Fetch episodes for first season
                fetchEpisodes(currentSelectedSeason);
            }
        }
        
        // Fetch episodes for a season
        async function fetchEpisodes(seasonNumber) {
            try {
                // For demo purposes, we'll create sample episodes
                const episodes = [];
                const episodeCount = seasonNumber === 1 ? 10 : seasonNumber === 2 ? 12 : 8;
                
                for (let i = 1; i <= episodeCount; i++) {
                    episodes.push({
                        id: `s${seasonNumber}e${i}`,
                        title: `Episode ${i}`,
                        number: i,
                        season: seasonNumber,
                        air_date: `2023-${seasonNumber.toString().padStart(2, '0')}-${i.toString().padStart(2, '0')}`,
                        still_path: null
                    });
                }
                
                currentEpisodes = episodes;
                renderEpisodes();
            } catch (error) {
                console.error('Error fetching episodes:', error);
                episodesList.innerHTML = '<p class="text-gray-400 col-span-full text-center">Failed to load episodes.</p>';
            }
        }
        
        // Render episodes
        function renderEpisodes() {
            episodesList.innerHTML = '';
            
            if (currentEpisodes.length === 0) {
                episodesList.innerHTML = '<p class="text-gray-400 col-span-full text-center">No episodes available</p>';
                return;
            }
            
            currentEpisodes.forEach(episode => {
                const episodeCard = document.createElement('div');
                episodeCard.className = 'episode-card';
                episodeCard.dataset.id = episode.id;
                episodeCard.dataset.number = episode.number;
                
                episodeCard.innerHTML = `
                    <div class="episode-thumbnail"></div>
                    <div class="episode-info">
                        <div class="title">E${episode.number}: ${episode.title}</div>
                        <div class="meta">${episode.air_date || 'N/A'}</div>
                    </div>
                `;
                
                episodeCard.addEventListener('click', () => {
                    // Highlight selected episode
                    document.querySelectorAll('.episode-card').forEach(el => {
                        el.classList.remove('active');
                    });
                    episodeCard.classList.add('active');
                    
                    // Store selected episode
                    currentSelectedEpisode = episode;
                    
                    // Show loading indicator
                    loadingIndicator.classList.remove('hidden');
                    fallbackMessage.classList.add('hidden');
                    
                    // Update server options for episode
                    setupServerOptions(
                        { id: currentItemId, imdb_id: currentItemImdbId }, 
                        currentItemMediaType, 
                        currentItemImdbId, 
                        currentTmdbId
                    );
                    
                    // Hide loading indicator after a delay
                    setTimeout(() => {
                        loadingIndicator.classList.add('hidden');
                    }, 2000);
                });
                
                episodesList.appendChild(episodeCard);
            });
            
            // Highlight the first episode by default
            if (currentEpisodes.length > 0) {
                episodesList.firstElementChild.classList.add('active');
                currentSelectedEpisode = currentEpisodes[0];
                
                // Update server options for first episode
                setupServerOptions(
                    { id: currentItemId, imdb_id: currentItemImdbId }, 
                    currentItemMediaType, 
                    currentItemImdbId, 
                    currentTmdbId
                );
            }
        }
        
        // Handle search
        async function handleSearch() {
            const query = searchInput.value.trim();
            
            if (query.length < 2) {
                // Reset to trending content if search is cleared
                if (query.length === 0) {
                    currentData = [...allData];
                    renderContent();
                }
                return;
            }
            
            try {
                // Show loading indicator
                contentGrid.innerHTML = '<div class="flex justify-center items-center h-64 col-span-full"><div class="loading-spinner"></div></div>';
                
                // Search for content
                const response = await fetch(`https://api.themoviedb.org/3/search/multi?api_key=${API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`);
                const data = await response.json();
                
                // Filter results to only include movies, TV shows, and anime
                currentData = data.results.filter(item => 
                    item.media_type === 'movie' || 
                    item.media_type === 'tv'
                ).slice(0, 30);
                
                renderContent();
            } catch (error) {
                console.error('Error searching:', error);
                contentGrid.innerHTML = '<div class="no-results text-gray-400">Error searching. Please try again.</div>';
            }
        }
        
        // Filter content by category
        function filterContent(category) {
            if (category === 'all') {
                currentData = [...allData];
                renderContent();
                return;
            }
            
            if (category === 'anime') {
                // Anime is a subset of TV shows in TMDB
                // For demo purposes, we'll filter by keyword
                currentData = allData.filter(item => {
                    const name = (item.name || item.title || '').toLowerCase();
                    return item.media_type === 'tv' && 
                           (name.includes('anime') || 
                            name.includes('naruto') || 
                            name.includes('dragon ball') || 
                            name.includes('one piece') || 
                            name.includes('attack on titan') || 
                            name.includes('demon slayer') ||
                            name.includes('my hero') ||
                            name.includes('tokyo ghoul') ||
                            name.includes('death note') ||
                            name.includes('fullmetal') ||
                            name.includes('cowboy bebop') ||
                            name.includes('one punch') ||
                            name.includes('jojo') ||
                            name.includes('hunter x hunter'));
                });
            } else {
                currentData = allData.filter(item => item.media_type === category);
            }
            
            renderContent();
        }
    </script>
</body>
</html>
